# contains configuation for a production setup a at site with access to an
# openstack instance
---
version: "3.5"
services:
  site_exporter:
    image: "denbicloud/os_project_usage_exporter:${EXPORTER_TAG}"
    container_name: project_usage_exporter
    networks:
      - usage_exporter
    environment:
      - USAGE_EXPORTER_START_DATE
      - USAGE_EXPORTER_UPDATE_INTERVAL
      - USAGE_EXPORTER_PROJECT_DOMAINS
      - USAGE_EXPORTER_PROJECT_ID
      - USAGE_EXPORTER_PROJECT_MB_WEIGHTS
      - USAGE_EXPORTER_VCPU_WEIGHTS
      - USAGE_EXPORTER_SIMPLE_VM_PROJECT_ID
      - USAGE_EXORTER_SIMPLE_VM_PROJECT_TAG
      - USAGE_EXPORTER_WEIGHTS_UPDATE_ENDPOINT
      - USAGE_EXPORTER_WEIGHT_UPDATE_FREQUENCY
      - USAGE_EXPORTER_START_DATE_ENDPOINT
      - USAGE_EXPORTER_VERBOSE_MODE
    expose:
      - "8080"
    ports:
      - "${EXPORTER_PORT}:8080"
  # prometheus instance responsible for monitoring
  site_prometheus:
    image: "prom/prometheus:${PROMETHEUS_TAG}"
    # use self build Dockerfile as alternative
    # build: prod/site_prometheus
    container_name: project_usage_prometheus
    networks:
      usage_exporter:
        aliases:
          - prometheus
    expose:
      - "9093"
    ports:
      - "9093:9090"
  site_prometheus_proxy:
    # use the one below to have haproxy debug log directly to stdout including
    # every request with auth headers
    # image: mminks/haproxy-docker-logging:latest
    image: "haproxy:${HAPROXY_TAG}"
    # use self build Dockerfile as alternative
    # build: prod/haproxy
    container_name: project_usage_proxy
    networks:
      - usage_exporter
    expose:
      # this port must be reachable by the portal prometheus instance
      # also setup some encryption to or in front of it, otherwise the whole
      # authentication stuff is useless
      - "80"
    volumes:
      - "./prod/haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro"
    environment:
      - PORTAL_AUTH_TOKEN
  site_grafana:
    image: "grafana/grafana:${GRAFANA_TAG}"
    # use self build Dockerfile as alternative
    # build: prod/grafana
    container_name: project_usage_grafana
    depends_on:
      - site_prometheus
    networks:
      - usage_exporter
    volumes:
      - "./shared/grafana/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml:ro"
      - "./shared/grafana/project_usages.json:/etc/grafana/provisioning/dashboards/project_usages.json:ro"
    environment:
      - GF_SECURITY_ADMIN_USER
      - GF_SECURITY_ADMIN_PASSWORD
    expose:
      - "3000"
networks:
  usage_exporter:
